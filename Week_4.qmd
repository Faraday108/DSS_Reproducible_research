---
title: "Week 4"
format: html
editor: visual
---

# Video: Caching computations  
Drawing from literate statistical programming methodology discussed prior  

## Caching computations  
The `cacher` package for R  
* Add-on package for R
* Evaluates code written in files and stores intermediate results in a key-value database 
* R expressions are given SHA-1 hash values so that changes can be tracked and code reevaluated if necessary
* "Cacher packages" can be built for distribution
* Outhers can "clone" an analysis and evaluate subsets of code or inspect data objects 

## Using `cacher` as an Author  
1. Parse the R source file, create necessary cache directories and subdirectories
2. Cycle through each expression in the source file
  * If an expression has never been evaluated, evaluate it and store any resulting R objects in the cache database
  * If a cache result exists, lazy-load the results from the cache database and move to the next expression
  * If an expression does not create any R objects (nothing to cache), add the expression to the list of expressions where evaluation needs to be forced
  * Write out metadata for this expression to the metadata file
* The `cachepackage` function creates a `cacher` package storing the source file, cached data objects, and metadata
* Package file is zipped for distribution
* Readers can unzip and investigate contents via `cacher` package

## Using `cacher` as a reader  
Using a SHA-1 has described (for example in a journal), you can `clonecache` the SHA-1

## Cloning an analysis  
* local directories are created
* Source code files and metadata are downloaded
* Data objects are *not* downloaded by default (due to size)
* References to data objects are loaded and correspond data can be lazy-loaded on demand
* You can trace code backwards
* You can `runcode` that loads from the database
* `checkcode` evaluates all expressions from scratch (no lazy-loading)
* the results of the evaluation are checked against stored results
* You can look at specific data objects `loadcache`; loads pointers to objects in database. 

## `cacher` summary  
* The package can be used by authors to create cache packages from data analysis for distribution 
* Readers can use the package to inspect other's data analysis by examining the cached computations
* Package is mindful of readers resources and efficiently loads only those data objects that are needed. 